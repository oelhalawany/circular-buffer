name: C++ CI/CD Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Run Cppcheck
  cppcheck:
    name: Static Analysis with Cppcheck
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Cppcheck
        run: sudo apt-get update && sudo apt-get install -y cppcheck

      - name: Run Cppcheck on src and include
        run: cppcheck --enable=all --inconclusive --std=c++17 src include

  # Job 2: Generate compile_commands.json
  build:
    name: Generate Build Files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Build Tools
        run: sudo apt-get update && sudo apt-get install -y cmake make

      - name: Configure Project and Generate compile_commands.json
        run: |
          mkdir -p build
          cd build
          cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
          make

      - name: Verify Build Directory Exists
        run: |
          if [ ! -d build ]; then
            echo "Build directory does not exist. Ensure the build step was successful.";
            exit 1;
          fi

      - name: Upload Build Directory
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: build/

  # Job 3: Run Clang-Tidy
  clang-tidy:
    name: Static Analysis with Clang-Tidy
    runs-on: ubuntu-latest
    needs: build  # Ensure compile_commands.json is available

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Clang and Clang-Tidy
        run: sudo apt-get update && sudo apt-get install -y clang clang-tidy

      - name: Download Build Directory
        uses: actions/download-artifact@v3
        with:
          name: build

      - name: Run Clang-Tidy on src and include
        run: |
          find src/ include/ -name "*.cpp" -o -name "*.hpp" | xargs clang-tidy -p build/ -- -std=c++17

  # Job 4: Run Valgrind
  valgrind:
    name: Memory Analysis with Valgrind
    runs-on: ubuntu-latest
    needs: build  # Ensure the build job completes successfully

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Valgrind
        run: sudo apt-get update && sudo apt-get install -y valgrind

      - name: Download Build Directory
        uses: actions/download-artifact@v3
        with:
          name: build

      - name: Run Valgrind on Executable
        run: |
          cd build
          valgrind ./CircularBufferApp

  # Job 5: Run Google Tests
  googletests:
    name: Run Google Tests
    runs-on: ubuntu-latest
    needs: build  # Ensure the build job completes successfully

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Build Tools
        run: sudo apt-get update && sudo apt-get install -y cmake make

      - name: Download Build Directory
        uses: actions/download-artifact@v3
        with:
          name: build

      - name: Build and Run Tests
        run: |
          cd build
          ctest --output-on-failure
